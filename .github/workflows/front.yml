name: Build, test and deploy (front)
env:
  PROJECT: gcs_finance_web

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev, master]
    types: [closed]
  workflow_dispatch:

jobs:
  initialize:
    runs-on: [ubuntu-latest]
    outputs:
      STAGE: ${{ steps.get_stage.outputs.STAGE }}
      PORT: ${{ steps.get_stage.outputs.PORT }}
      IMAGE_NAME: ghcr.io/${{ github.repository }}/${{ env.PROJECT }}
    steps:
      - name: Get STAGE
        id: get_stage
        run: |
          if [[ $BASE_REF == "master" || $REF == "refs/heads/master" ]]
          then
              echo "::set-output name=STAGE::prod" && echo "::set-output name=PORT::80"
          elif [[ $BASE_REF == "dev" || $REF == "refs/heads/dev" ]]
          then
              echo "::set-output name=STAGE::dev" && echo "::set-output name=PORT::8081"
          else
              echo "Invalid branch" && exit 1
          fi
        env:
          REF: ${{ github.ref }}
          BASE_REF: ${{ github.base_ref }}

  build:
    # if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: [ubuntu-latest]
    needs: [initialize]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v2-beta
        with:
          node-version: 12.x

      - name: Install dependencies
        run: cd web && npm i -g env-cmd && npm i

      - name: Run build script
        run: cd web && npm run build:${{ needs.initialize.outputs.STAGE }}

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          context: web
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ env.PROJECT }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}/${{ env.PROJECT }}:${{ needs.initialize.outputs.STAGE }}

  deploy:
    # if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: [ubuntu-latest]
    needs: [initialize, build]
    steps:
      - name: Configure SSH
        run: |
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh/
          echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-add ~/.ssh/id_ed25519
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            Port 2201
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Deploy image
        run: ssh server 'docker pull ${{ needs.initialize.outputs.IMAGE_NAME }}:${{ needs.initialize.outputs.STAGE }}'

      - name: Run stage container
        run: ssh server 'docker rm --force ${{ env.CONTAINER_NAME }} && docker run -d -p ${{ needs.initialize.outputs.PORT }}:8081 --name ${{ env.CONTAINER_NAME }} ${{ needs.initialize.outputs.IMAGE_NAME }}:${{ needs.initialize.outputs.STAGE }}'
        env:
          CONTAINER_NAME: ${{ env.PROJECT }}_${{ needs.initialize.outputs.STAGE }}
